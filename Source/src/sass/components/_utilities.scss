// Truncate string
.truncate {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

// SVG fill color
.fill-current {
    fill: currentColor;
}

// Resize textarea
.resize-none {
    resize: none;
}

// User select
.select-none {
    user-select: none;
}

// Grid
.grid {
    grid-template-rows: repeat(var(--bs-rows, 1), minmax(0, 1fr));
    grid-template-columns: repeat(var(--bs-columns, 12), minmax(0, 1fr));
}

// Placeholder color
@each $color-key, $color in $utilities-colors {
    .placeholder-#{$color-key}::placeholder,
    .placeholder-#{$color-key}-hover:hover::placeholder {
        color: $color !important;
    }
}

// Dark mode text color
@each $color-key, $color in $utilities-colors {
    .dark {
        .dark-text-#{$color-key},
        .dark-text-#{$color-key}-hover:hover {
            color: $color !important;
        }
    }
}

// Dark mode background
@each $color-key, $color in $utilities-colors {
    .dark {
        .dark-bg-#{$color-key},
        .dark-bg-#{$color-key}-hover:hover {
            background-color: $color !important;
        }
    }
}

// Dark mode border
@each $color-key, $color in $utilities-colors {
    .dark {
        .dark-border-#{$color-key},
        .dark-border-#{$color-key}-hover:hover {
            border-color: $color !important;
        }
    }
}

// Dark mode background opacity
@each $bg-opacity-key, $bg-opacity in $bg-opacity {
    .dark {
        .bg-opacity-#{$bg-opacity-key},
        .bg-opacity-#{$bg-opacity-key}-hover:hover {
            --#{$variable-prefix}bg-opacity: $bg-opacity !important;
        }
    }
}
